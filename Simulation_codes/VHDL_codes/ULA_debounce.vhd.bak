library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

 
entity ULA_debounce is

	 generic(delay: integer := 50000);
    
	 Port ( clk: in std_logic; -- clock input
			  input: in std_logic; -- button input
			  debounce: out std_logic);
	  
end ULA_debounce;

architecture Behavioral of ULA_debounce is

	signal sample_pulse: std_logic := '0';
	signal sample: std_logic_vector(9 downto 0) := "0001111000";
	signal debounce_s: std_logic := '0';

begin

debounce <= debounce_s;

process(clk) --Clock Divider
variable count: integer := 0;
begin
	if (clk'event and clk = '1') then
		
		if (count < delay) then
			count := count + 1;
			sample_pulse <= '0';
		else
			count := 0;
			sample_pulse <= '1';
		end if;
		
	end if;
end process;


process(clk) --Sampling Process
begin
	if (clk'event and clk = '1') then
		
		if (sample_pulse = '1') then
			sample(9 downto 1) <= sample(8 downto 0); -- Left Shift
			sample(0) <= input;
		end if;
		
	end if;
end process;

process(clk) --Button Debouncing 
variable flag: std_logic := '0';
begin
	if (clk'event and clk = '1') then
	
		if (sample = "1111111111") then --Active High Pulse Out
			
			if (flag = '0') then
				debounce_s <= '1';
				flag := '1';
			else
				debounce_s <= '0';
			end if;
			
		else
			debounce_s <= '0';
			flag := '0';
		end if;
		
	end if;
end process;

end Behavioral;
