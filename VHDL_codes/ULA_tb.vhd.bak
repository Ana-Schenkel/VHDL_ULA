library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity ULA_tb is
end ULA_tb;

architecture Behavioral of ULA_tb is

component ULA

	Port( clk : in std_logic;
			button : in std_logic;
			sw0     : in std_logic;
			sw1     : in std_logic;
			sw2     : in std_logic;
			sw3     : in std_logic;
			led0   : out std_logic;
			led1   : out std_logic;
			led2   : out std_logic;
			led3   : out std_logic;
			led4   : out std_logic;
			led5   : out std_logic;
			led6   : out std_logic;
			led7   : out std_logic);

end component;

signal clk, button: std_logic;
signal led0, led1, led2, led3, led4, led5, led6, led7: std_logic;
signal sw0, sw1, sw2, sw3: std_logic;

begin

	dut: ULA_lab port map	(
		clk => clk, 
		debounce => debounce, 
		
		sw0 => sw0,
		sw1 => sw1,
		sw2 => sw2,
		sw3 => sw3,

		led0 => led0,
		led1 => led1,
		led2 => led2,
		led3 => led3,
		led4 => led4,
		led5 => led5,
		led6 => led6,
		led7 => led7);
   
	
-- Clock process definitions
clock_process :process
begin
     clk <= '0';
     wait for 5 ns;
     clk <= '1';
     wait for 5 ns;
end process;


-- Stimulus process
stim_proc: process
begin        
   -- hold reset state for 100 ns.
	button <= '1';
	sw3 <= '0'; sw2 <= '1'; sw1 <= '0'; sw0 <= '1';  -- switches <= "0101"
	wait for 10 ns;

	button <= '0';
	wait for 10 ns;

	button <= '1';
	sw3 <= '1'; sw2 <= '1'; sw1 <= '1'; sw0 <= '1';  -- switches <= "1111"
	wait for 10 ns;

	button <= '0';
	wait for 10 ns;

	button <= '1';
	sw3 <= '1'; sw2 <= '1'; sw1 <= '1'; sw0 <= '0';  -- switches <= "1110"
	wait for 10 ns;

	button <= '0';
	wait for 10 ns;

	button <= '1';
	wait for 10 ns;

	button <= '0';
	wait for 10 ns;
	
   wait;
end process;
end Behavioral;
